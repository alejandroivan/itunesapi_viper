//
//  PreviewPlayerPresenter.swift
//  itunesapi
//
//  Created by dpsmac1 on 09-05-18.
//  Copyright (c) 2018 Alejandro Iv√°n. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import OrigamiEngine
import AVFoundation

final class PreviewPlayerPresenter: NSObject {

    // MARK: - Private properties -

    private unowned var _view: PreviewPlayerViewInterface
    private var _interactor: PreviewPlayerInteractorInterface
    private var _wireframe: PreviewPlayerWireframeInterface
    private let song: Media
    
    lazy private var player: ORGMEngine = {
        let engine = ORGMEngine()
        _view.player = engine
        return engine
    }()

    // MARK: - Lifecycle -

    init(wireframe: PreviewPlayerWireframeInterface, view: PreviewPlayerViewInterface, interactor: PreviewPlayerInteractorInterface, song: Media) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
        self.song = song
    }
    
    func viewDidLoad() {
        _view.item = song
    }
}

// MARK: - Extensions -

// MARK: Close player
extension PreviewPlayerPresenter: PreviewPlayerPresenterInterface {
    func didClosePreviewPlayer() {
        stopPreview()
    }
}




// MARK: Playback
extension PreviewPlayerPresenter {
    func playPreview(_ url: URL) {
        enableAudioSession()
        player.delegate = _view
        player.play(url)
    }
    
    func stopPreview() {
        player.stop()
        player.delegate = nil
        disableAudioSession()
    }
    
    func seek(_ value: Float) {
        player.seek(toTime: Double(value))
    }
}




// MARK: - Audio session
extension PreviewPlayerPresenter {
    func enableAudioSession() {
        let session = AVAudioSession.sharedInstance()
        try? session.setCategory(AVAudioSessionCategoryPlayback)
        try? session.setActive(true)
    }
    
    func disableAudioSession() {
        let session = AVAudioSession.sharedInstance()
        let queue = ORGMQueues.processing_queue()
        
        queue?.async {
            try? session.setActive(false)
        }
    }
}
