//
//  PreviewPlayerViewController.swift
//  itunesapi
//
//  Created by dpsmac1 on 09-05-18.
//  Copyright (c) 2018 Alejandro Iván. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import AlamofireImage
import OrigamiEngine

final class PreviewPlayerViewController: UIViewController {

    // MARK: - Private properties -
    @IBOutlet private weak var coverImageView: UIImageView!
    @IBOutlet private weak var trackNameLabel: UILabel!
    @IBOutlet private weak var playerContainerView: UIView!
    @IBOutlet fileprivate weak var seekSlider: UISlider!
    @IBOutlet fileprivate weak var playedTimeLabel: UILabel!
    @IBOutlet fileprivate weak var totalTimeLabel: UILabel!
    
    private var refreshTimer: Timer?
    
    weak var player: ORGMEngine?
    
    
    
    // MARK: - Public properties -

    var presenter: PreviewPlayerPresenterInterface!
    var item: Media? {
        didSet {
            reloadData()
        }
    }

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setupBlurEffect()
        presenter.viewDidLoad()
        
        seekSlider.addTarget(self, action: #selector(seek(_:)), for: .valueChanged)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        refreshTimer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(refreshPlayer), userInfo: nil, repeats: true)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        refreshTimer?.invalidate()
        refreshTimer = nil
    }
	
    @IBAction func closePopup() {
        dismiss(animated: true) {
            self.presenter.didClosePreviewPlayer()
        }
    }
    
    @objc private func seek(_ sender: UISlider) {
        presenter.seek(seekSlider.value)
    }
}

// MARK: - Extensions -

extension PreviewPlayerViewController: PreviewPlayerViewInterface {
}




// MARK: - Update UI
extension PreviewPlayerViewController {
    fileprivate func reloadData() {
        guard let item = item, let imageURL = item.urlForArtwork, let previewURL = item.urlForPreview else {
            return
        }
        
        /*
         El seteo de la imagen debería ser instantáneo, ya que se obtuvo
         en DetailsViewController y Alamofire cachea la respuesta.
         */
        coverImageView.af_cancelImageRequest()
        coverImageView.af_setImage(withURL: imageURL)
        
        trackNameLabel.text = item.trackName
        
        presenter.playPreview(previewURL)
    }
    
    @objc fileprivate func refreshPlayer() {
        guard
            let state = player?.currentState,
            state == ORGMEngineStatePlaying,
            let amountPlayed = player?.amountPlayed(),
            let trackTime = player?.trackTime()
        else {
            return
        }
        
        let played = Int(floor(amountPlayed))
        let total = Int(ceil(trackTime))
        
        seekSlider.value = Float(amountPlayed)
        playedTimeLabel.text = "\(played)s"
        totalTimeLabel.text = "\(total)s"
    }
}




// MARK: - Blur effect
extension PreviewPlayerViewController {
    fileprivate func setupBlurEffect() {
        // Background blur yeeey
        let blurEffect = UIBlurEffect(style: .dark)
        let blurEffectView = UIVisualEffectView(effect: blurEffect)
        blurEffectView.frame = view.bounds
        
        view.addSubview(blurEffectView)
        view.sendSubview(toBack: blurEffectView)
    }
}




// MARK: - ORGMEngine
extension PreviewPlayerViewController: ORGMEngineDelegate {
    func engineExpectsNextUrl(_ engine: ORGMEngine!) -> URL! {
        return nil // Solo un asset a reproducir
    }
    
    @objc func engine(_ engine: ORGMEngine!, didChange state: ORGMEngineState) {
        print("engine:didChangeState:")
        
        switch state {
        case ORGMEngineStateStopped:
            seekSlider.value = 0.0
            playedTimeLabel.text = nil
            totalTimeLabel.text = nil
            
        case ORGMEngineStatePlaying:
            seekSlider.maximumValue = Float(player?.trackTime() ?? 0.0)
            seekSlider.value = Float(0.0)
            
        default:
            break
        }
    }
}
